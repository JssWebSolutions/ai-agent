rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
        request.resource.size <= 5 * 1024 * 1024;
    }

    // Profile images
    match /profile-images/{userId}/{allImages=**} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId) && isValidImage();
      allow update, delete: if isAuthenticated() && isOwner(userId);
    }

    // Agent images
    match /agent-images/{agentId}/{allImages=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        exists(/databases/$(database)/documents/agents/$(agentId)) &&
        get(/databases/$(database)/documents/agents/$(agentId)).data.userId == request.auth.uid;
    }

    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
