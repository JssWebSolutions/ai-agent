rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Allow users to read their own documents
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Allow users to read/write their own agents
    match /agents/{agentId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        resource == null || 
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
    }

    // Allow users to read/write their own usage data
    match /usage/{document} {
      allow read: if isAuthenticated() && (
        document == request.auth.uid || isAdmin()
      );
      allow write: if isAdmin();
    }

    // Allow users to read their own subscription data
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow write: if isAdmin();
    }
  }
}